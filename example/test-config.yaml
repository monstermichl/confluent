# test-config.yaml file.

# --- Includes ------------------------------------------------------------
# This optional section allows to include other configuration files to
# incorporate their property values into properties of this file.
# -------------------------------------------------------------------------
includes:
  # --- Common properties ---------------------------------------------------
  # path (required): Specifies the path to the external configuration file.
  # as   (required): Specifies how the file will be referenced in value
  #                  substitutions (e.g., ${ti.myIncludedString}).
  # -------------------------------------------------------------------------
  - path: test-include.yaml
    as: ti

# --- Languages -----------------------------------------------------------
# This optional section defines for which languages to generate files. It is
# optional because configuration files might just define properties, that
# are imported into other configuration files.
# -------------------------------------------------------------------------
languages:
  # --- Common properties (valid for all languages) -------------------------
  # type            (required): Specifies the output language (java | javascript | typescript | python | c | go).
  #
  # file_naming     (optional): Specifies the file naming convention (snake | screaming_snake | camel | pascal | kebap).
  #                             Defaults to the file-name without the extension.
  # property_naming (optional): Specifies the property naming convention (snake | screaming_snake | camel | pascal | kebap).
  # type_naming     (optional): Specifies the naming convention for the generated type (snake | screaming_snake | camel | pascal | kebap).
  #                             The default value is language specific.
  # indent          (optional): Specifies the amount of spaces before each
  #                             constant. Defaults to 4.
  # transform       (optional): Specifies a Python script to transform the
  #                             currently processed property. To reflect
  #                             changes to the outside of the script, the
  #                             value variable must be modified. The script
  #                             has access to the following variables:
  #
  #                             name: Property name.
  #                             value: Property value.
  #                             type: Property type.
  #                             properties: List of all properties (must not be modified).
  # -------------------------------------------------------------------------

  # --- Java specific properties --------------------------------------------
  # package (required): Specifies the Java package name.
  # -------------------------------------------------------------------------
  - type: java
    file_naming: pascal
    type_naming: pascal
    package: my.test.package

  # --- JavaScript/TypeScript specific properties ---------------------------
  # export (optional): Specifies how to export the class (esm | common_js | none).
  #                    Defaults to esm.
  # -------------------------------------------------------------------------
  - type: javascript
    file_naming: screaming_snake
    indent: 4
    export: common_js

  - type: typescript
    indent: 4
    export: esm

    # --- File distribution ---------------------------------------------------
    # Each language section can have a distributions section which specifies,
    # to which locations to distribute the generated file to.
    #
    # type (required): Specifies the distribution type (git | fs).
    # as   (optional): Specifies an alias for the distribution. This alias might
    #                  be necessary for specific distribution types (e.g. for git).
    #
    # The rest of the properties are distribution specific and described beside
    # the property.
    # -------------------------------------------------------------------------
    distributions:
      # --- Distribution to a Git server ----------------------------------------
      # Distributes the file to a Git server. Minimum Git requirement is v2.29.0.
      #
      # type     (required): Specifies Git as the distribution type (git).
      # url      (required): Specifies the URL of the Git repository.
      # path     (optional): Relative target path within the Git repository.
      # user     (optional): Git user.
      # password (optional): Git password.
      # as       (optional): An alias is required if the password shall e provided
      #                      via commandline in the form of
      #                      -s/--secret <alias>=[<username>:]<password>.
      # -------------------------------------------------------------------------
      #- type: git
      #  as: git-monstermichl
      #  url: https://github.com/monstermichl/confluent-test.git
      #  path: generated

      # --- Distribution to filesystem ------------------------------------------
      # Distribute the file to a different location in the file system.
      #
      # type        (required): Specifies filesystem as the distribution type (fs).
      # path        (optional): Relative or absolute target path.
      # create_dirs (optional): If true, parent directories will be created if
      #                         they don't exist.
      # -------------------------------------------------------------------------
      - type: fs
        path: distributed
        create_dirs: true

  # -------------------------------------------------------------------------
  - type: python
    file_naming: snake
    property_naming: screaming_snake

  # -------------------------------------------------------------------------
  - type: c
    file_naming: snake
    property_naming: pascal

  # --- Go specific properties ----------------------------------------------
  # package (required): Specifies the Go package name.
  # -------------------------------------------------------------------------
  - type: go
    file_naming: snake
    package: myconfig
    transform: |  # If the property 'myString' is being processed, replace the value by 'Hello Mars'.
      if name == 'myString':
        value = 'Hello Mars'

# --- Properties ----------------------------------------------------------
# This mandatory section defines the actual properties.
# -------------------------------------------------------------------------
properties:
  # -------------------------------------------------------------------------
  # type    (required): Specifies the constant data type (bool | int | float | double | string | regex).
  # name    (required): Specifies the constant's name.
  # value   (required): Specifies the constant's value.
  #
  # comment (optional): Adds an extra comment to the constant.
  # hidden  (optional): Constants serves as helper and will not be written to
  #                     the final result.
  # -------------------------------------------------------------------------

  - type: bool
    name: myBoolean
    value: true

  - type: int
    name: myInteger
    value: 142

  - type: float
    name: myFloat
    value: 322f  # Float with float specifier. However, an additional specifier (f) is not required and will be trimmed.

  - type: float
    name: myCombinedFloat
    value: ${myInteger} * ${myFloat}  # Number and boolean combinations get evaluated during the dump process.

  - type: double
    name: myDouble
    value: 233.9

  - type: string
    name: myString
    value: Hello World
    hidden: true  # If a property should act as a helper but should not be written to the generated file, it must be marked as 'hidden'.

  - type: regex
    name: myRegex
    value: Test Reg(E|e)x
    comment: Just another RegEx.  # Variables can be described using the comment property.

  - type: string
    name: mySubstitutedString
    value: Sometimes I just want to scream ${myString}!  # To use the value of another property, simply use its name with ${}. E.g., ${myString}.

  - type: string
    name: myCombinedString
    value: I am telling you that ${ti.myIncludedString}.  # To use the value of another property from an included file, simply use the file's
                                                          # alias and the corresponding property name. E.g., ${ti.myIncludedString}.
